{"version":3,"sources":["components/CustomInput.jsx","styles.js","App.jsx","index.js"],"names":["CustomInput","title","props","TextField","label","defaultProps","useStyles","makeStyles","theme","centerContent","justifyContent","flexDirection","alignItems","display","marginTop5","marginTop","spacing","marginTop2","marginTop1","schema","createSchema","name","yup","required","email","phone","customInput","authentication","shape","password","min","confirmPassword","oneOf","mixed","default","App","useFormup","onError","errors","console","warn","onSubmit","values","formikForm","submitForm","FormInput","Form","classes","Grid","container","className","item","xs","classNames","Typography","variant","role","aria-label","component","type","Button","onClick","color","href","rel","target","IconButton","margin","fontSize","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5f9f306.chunk.js","sourcesContent":["import React from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport PropTypes from 'prop-types';\n\nconst CustomInput = ({\n  title, // Custom property\n  ...props\n}) => (\n  <div>\n    <TextField label={title} {...props} />\n  </div>\n);\n\nCustomInput.propTypes = {\n  title: PropTypes.string,\n};\n\nCustomInput.defaultProps = {\n  title: null,\n};\n\nexport default CustomInput;\n","import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  centerContent: {\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    display: 'flex',\n  },\n  marginTop5: {\n    marginTop: theme.spacing(5),\n  },\n  marginTop2: {\n    marginTop: theme.spacing(2),\n  },\n  marginTop1: {\n    marginTop: theme.spacing(1),\n  },\n}));\n\nexport default useStyles;\n","import React from 'react';\nimport * as yup from 'yup';\nimport classNames from 'classnames';\n\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport TextField from '@material-ui/core/TextField';\nimport GitHubIcon from '@material-ui/icons/GitHub';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nimport {\n  useFormup,\n  createSchema,\n} from '@formup/core';\n\nimport CustomInput from './components/CustomInput';\nimport useStyles from './styles';\n\n// You can customize your locale to support multiple languages easily using createSchema!\nconst locale = {\n  mixed: {\n    default: 'Invalid field!',\n  },\n};\n\n// You don't need to use createSchema if you're not customizing your locale.\n// You can use yup instead, no problems!\nconst schema = createSchema({\n  // Your schema supports simple field\n  name: yup.string()\n    .required()\n    .label('Name'),\n\n  // Or a field with custom validations\n  email: yup.string()\n    .required()\n    .email()\n    .label('Email'),\n\n  // Optional fields too\n  phone: yup.string()\n    .required()\n    .label('Phone'),\n\n  customInput: yup.string()\n    .required(),\n\n  // And even multi-level nested fields!\n  authentication: yup.object().shape({\n    password: yup.string()\n      .required()\n      .min(5)\n      .label('Password'),\n    confirmPassword: yup.string()\n      .required()\n      .min(5)\n      .oneOf([yup.ref('password'), null])\n      .label('Confirm your password'),\n  }),\n}, locale);\n\nconst App = () => {\n  // You can add custom error handling if your validation fails\n  const handleValidationError = (errors) => {\n    console.warn('Form validation error!', errors);\n  };\n\n  // Here we'll handle submiting the form\n  const handleSubmitForm = (values) => {\n    const {\n      name,\n      phone,\n      email,\n      password,\n      confirmPassword,\n    } = values;\n\n    console.warn('Form is valid! Submitting information...', {\n      name,\n      phone,\n      email,\n      password,\n      confirmPassword,\n    });\n\n    // Submit your form to your backend or any API here! =).\n    return true;\n  };\n\n  // Initialize your Formup form\n  const {\n    formikForm,\n    submitForm,\n    FormInput,\n    Form,\n  } = useFormup(schema, {\n    // Formik options\n    onError: handleValidationError,\n    onSubmit: handleSubmitForm,\n  });\n\n  const classes = useStyles();\n\n  return (\n    <Grid container spacing={3} className={classes.centerContent}>\n      <Grid item xs={12} className={classNames(classes.marginTop5, classes.centerContent)}>\n        <Typography variant=\"h3\">\n          Formup is awesome\n          <span role=\"img\" aria-label=\"Formup is awesome\"> üòÜ</span>\n        </Typography>\n      </Grid>\n\n      <Grid item xs={12} className={classNames(classes.marginTop2, classes.centerContent)}>\n        <Form formikForm={formikForm}>\n          {/*\n            FormInput will take care of all validation!\n            Simply provide the \"name\" prop.\n          */}\n\n          <FormInput name=\"name\" label=\"Name\" />\n\n          {/*\n            You can render ANY custom input as a component! =)\n            You can pass any custom props to your components too.\n          */}\n\n          <FormInput name=\"customInput\" title=\"Custom input render!\" component={CustomInput} />\n\n          <FormInput name=\"email\" label=\"Email\" component={TextField} />\n          <FormInput name=\"phone\" label=\"Phone\" component={TextField} />\n\n          {/*\n            Oh, and it will take care of nested fields too. <3\n          */}\n\n          <FormInput\n            type=\"password\"\n            name=\"authentication.password\"\n            label=\"Password\"\n            component={TextField}\n          />\n\n          <FormInput\n            type=\"password\"\n            name=\"authentication.confirmPassword\"\n            label=\"Confirm Password\"\n            component={TextField}\n          />\n\n          <Button\n            className={classes.marginTop5}\n            onClick={submitForm}\n            variant=\"contained\"\n            color=\"primary\"\n          >\n            Submit!\n            <span role=\"img\" aria-label=\"Formup is awesome\"> üöÄ</span>\n          </Button>\n        </Form>\n      </Grid>\n\n      <Grid item xs={12} className={classNames(classes.marginTop2, classes.centerContent)}>\n        <Typography variant=\"body1\">\n          <span>\n            {'Made with '}\n            <span role=\"img\" aria-label=\"github\">‚ù§Ô∏è</span>\n            {'by '}\n            <a\n              href=\"https://github.com/pedro-lb\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Pedro Bini\n            </a>\n          </span>\n\n          <span>\n            {' and contributors at '}\n            <a\n              href=\"https://www.npmjs.com/org/formup\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              Formup\n            </a>\n          </span>\n          .\n        </Typography>\n\n        <a\n          href=\"https://github.com/pedro-lb/formup\"\n          rel=\"noopener noreferrer\"\n          className={classes.marginTop1}\n          target=\"_blank\"\n        >\n          <IconButton\n            aria-label=\"github repo\"\n            className={classes.margin}\n          >\n            <GitHubIcon color=\"primary\" fontSize=\"large\" />\n          </IconButton>\n        </a>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}